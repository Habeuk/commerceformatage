<?php

/**
 *
 * @file
 * Primary module hooks for commerce formatage module.
 *
 * @DCG
 * This file is no longer required in Drupal 8.
 * @see https://www.drupal.org/node/2217931
 */
use Drupal\Core\Form\FormStateInterface;

/**
 * Gerer l'affichage du formaulaire ajout au panier.
 *
 * @param array $form
 * @param FormStateInterface $form_state
 * @param string $form_id
 */
function commerceformatage_form_alter(array &$form, FormStateInterface $form_state, $form_id) {
  //
  if (str_contains($form_id, 'commerce_checkout_flow')) {
    $form['#attributes']['class'][] = 'with-tablet mx-auto my-5';
    // dump($form);
    /**
     * On differencie les titres de blocks.
     */
    foreach ($form as &$value) {
      if (is_array($value) && !empty($value['#type']) && $value['#type'] == 'fieldset') {
        $value['#legend']['attributes']['class'][] = 'h2';
        // dump($value);
        // On force la paiement la modification du titre, mais il est logique
        // qu'on doit chnager cela.
        if (!empty($value['#pane_id']) && $value['#pane_id'] == 'payment_information') {
          // $value['#title'] = "Information de livraison";
        }
      }
    }
    //
    if (!empty($form['review'])) {
      // dump($form['review']);
      foreach ($form['review'] as $k => &$value) {
        if (is_array($value) && !empty($value['#type']) && $value['#type'] == 'fieldset') {
          $value['#legend']['attributes']['class'][] = 'h2';
          // on differencie l'affichage des payments;
          if (!empty($value['summary']['payment_gateway'])) {
            //
            $value['summary']['payment_gateway'] = [
              '#type' => 'html_tag',
              '#tag' => 'div',
              '#attributes' => [
                'class' => [
                  "h4"
                ]
              ],
              '#value' => $value['summary']['payment_gateway']['#markup']
            ];
          }
          //
          // dump($value);
          // On force la paiement la modification du titre, mais il est
          // logique
          // qu'on doit chnager cela.
          if ($k == 'payment_information') {
            // $value['#title'] = "Information de livraison";
          }
        }
      }
    /**
     * On doit mieux comprendre Finalize shipmentCancel shipment, mais en
     * attendant on se doit masquer ce champs.
     * RQ: l'entite qui gere cela c'est "commerce_shipment" on peut le retirer
     * au niveau de l'affichage du formulaire.
     * Bref c'etait dans =>
     * /admin/commerce/config/shipment-types/shipping_with_creneau/edit/display
     * il fallait desactiver le champs State.
     */
      // if
      // (!empty($form['review']['shipping_information']['summary'][0]['shipment']))
      // {
      // $form['review']['shipping_information']['summary'][0]['#access'] =
      // false;
      // dump($form['review']['shipping_information']['summary'][0]);
      // }
    }
    /**
     * Etape : order_information.
     */
    if (!empty($form['#step_id']) && $form['#step_id'] == "order_information") {
      // dump($form);
    }
  }
}

/**
 * Implement hook_preprocess_page
 */
function commerceformatage_preprocess_page(&$variables) {
  $loggin = \Drupal::currentUser()->id();
  if (!$loggin) {
    // cette librairie permet de faire des liens ajax.
    $variables['page']['content']['#attached']['library'][] = 'core/drupal.ajax';
  }
}

/**
 *
 * @param array $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 * @param int $form_id
 */
function commerceformatage_form_commerce_order_item_add_to_cart_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // dump($form);
  $entityTypeManger = \Drupal::entityTypeManager();
  // Si l'utilisateur a selectionner un variante:
  if ($form_state->has('selected_variation')) {
    $selected_variation = $form_state->get('selected_variation');
    /** @var \Drupal\commerce_product\Entity\ProductVariationInterface $selected_variation */
    $selected_variation = $entityTypeManger->getStorage('commerce_product_variation')->load($selected_variation);
  }
  else {
    $selected_variation = $form_state->get('product')->getDefaultVariation();
  }
  // add id off variation.
  $form['commerce_product_variation_id'] = [
    '#type' => 'hidden',
    '#value' => $selected_variation->id()
  ];
  // dump($form);
  // disbled default submit
  $form['actions']['submit']['#access'] = false;
  // add custom submit (utilise ajax)
  $custom_submit = [
    '#type' => 'html_tag',
    '#tag' => 'span',
    '#attributes' => [
      'class' => [
        'd-flex',
        'justify-content-center',
        'align-items-center',
        'btn',
        'btn-primary',
        'w-100',
        'commerceformatage-button-add-to-cart'
      ]
    ],
    // valeur 1: icon
    [
      '#type' => 'html_tag',
      '#tag' => 'i',
      '#attributes' => [
        'class' => [
          'fas',
          'fa-cart-plus'
        ]
      ]
    ],
    // valeur 2: texte ( la position de ce texte ne change pas pour 1x ).
    [
      '#type' => 'html_tag',
      '#tag' => 'div',
      '#attributes' => [
        'class' => [
          'px-4'
        ]
      ],
      '#has_value_add_to_cart' => true,
      '#value' => $form['actions']['submit']['#value']
    ],
    // valeur 3: icone loader.
    [
      '#type' => 'html_tag',
      '#tag' => 'i',
      '#attributes' => [
        'class' => [
          'fas',
          'fa-spinner',
          'loading',
          'd-none'
        ]
      ]
    ]
  ];
  /**
   *
   * @var \Drupal\commerce_cart\Form\AddToCartForm $formAddCart
   */
  $formAddCart = $form_state->getFormObject();
  /**
   *
   * @var \Drupal\commerce_order\Entity\OrderItem $entity
   */
  $entity = $formAddCart->getEntity();
  // dump($entity->bundle());
  if (!empty($form['quantity'])) {
    $quantity = $form['quantity'];
    unset($form['quantity']);
    $form['actions']['custom_submit'] = $custom_submit;
    $actions = $form['actions'];
    unset($form['actions']);
    $container = [
      '#type' => 'html_tag',
      '#tag' => 'div',
      '#attributes' => [
        'class' => [
          'row no-gutters d-flex align-items-end'
        ]
      ],
      [
        '#type' => 'html_tag',
        '#tag' => 'div',
        '#attributes' => [
          'class' => [
            'col-3'
          ]
        ],
        $quantity
      ],
      [
        '#type' => 'html_tag',
        '#tag' => 'div',
        '#attributes' => [
          'class' => [
            'col'
          ]
        ],
        $actions
      ]
    ];
    $form['contain-qty-add'] = $container;
  }
  else {
    $form['actions']['custom_submit'] = $custom_submit;
    if (!empty($form['actions']['submit']))
      unset($form['actions']['submit']);
  }
}

/**
 * Permet de surcharger la page panier.
 *
 * @param array $form
 * @param FormStateInterface $form_state
 * @param integer $form_id
 */
function commerceformatage_form_views_form_commerce_cart_form_default_alter(&$form, FormStateInterface $form_state, $form_id) {
  
  // Add class container
  if (!isset($form['#attributes']['class'])) {
    $form['#attributes']['class'] = [];
  }
  $form['#attributes']['class'][] = 'container';
  $form['#attributes']['class'][] = 'my-5';
  $form['#attributes']['class'][] = 'table-td-align-middle';
  $form['#attributes']['class'][] = 'cart-form';
  // formatage des bouttons.
  if (!empty($form['actions']['submit']) && !empty($form['actions']['checkout'])) {
    // add icon in update cart
    $form['actions']['submit']['#html_value'] = [
      [
        '#type' => 'html_tag',
        '#tag' => 'i',
        '#attributes' => [
          'class' => [
            'fas fa-cart-arrow-down'
          ]
        ]
      ],
      [
        '#type' => 'html_tag',
        '#tag' => 'span',
        '#attributes' => [
          'class' => [
            'pl-3'
          ]
        ],
        '#value' => $form['actions']['submit']['#value']
      ]
    ];
    $form['actions']['submit']['#attributes'] = [
      'class' => [
        'w-auto',
        'd-flex'
      ],
      'data-twig-suggestion' => 'commerce'
    ];
    // add icon in update checkout
    $form['actions']['checkout']['#html_value'] = [
      [
        '#type' => 'html_tag',
        '#tag' => 'span',
        '#attributes' => [
          'class' => [
            'pr-3'
          ]
        ],
        '#value' => $form['actions']['checkout']['#value']
      ],
      [
        '#type' => 'html_tag',
        '#tag' => 'i',
        '#attributes' => [
          'class' => [
            'fas fa-angle-right'
          ]
        ]
      ]
    ];
    $form['actions']['checkout']['#attributes'] = [
      'class' => [
        'w-auto'
      ],
      'data-twig-suggestion' => 'commerce'
    ];
    //
    $form['actions']['container'] = [
      '#type' => 'html_tag',
      '#tag' => 'div',
      '#attributes' => [
        'class' => [
          'd-flex',
          'justify-content-between',
          'flex-wrap'
        ]
      ],
      $form['actions']['submit'],
      $form['actions']['checkout']
    ];
    // dump($form['actions']['submit']);
    unset($form['actions']['checkout']);
    unset($form['actions']['submit']);
  }
}

/**
 * On recupere la valeur du html.
 *
 * @param array $vars
 */
function commerceformatage_preprocess_input__submit__commerce(&$vars) {
  $vars['safe_value_label'] = $vars['element']['#html_value'];
}

function commerceformatage_theme() {
  $hooks['submit_commerce'] = [
    'preprocess functions' => [
      'template_preprocess_submit_commerce'
    ],
    'render element' => 'element',
    'file' => 'commerceformatage.theme.inc'
  ];
  $hooks['commerceformatage_cart_bloc_count'] = [
    'preprocess functions' => [
      'template_preprocess_commerceformatage_cart_bloc_count'
    ],
    'render element' => 'element',
    'file' => 'commerceformatage.theme.inc'
  ];
  return $hooks;
}

/**
 *
 * @param
 *        $suggestions
 * @param array $variables
 */
function commerceformatage_theme_suggestions_input_alter(&$suggestions, array $variables) {
  $element = $variables['element'];
  if (isset($element['#attributes']['data-twig-suggestion'])) {
    $suggestions[] = 'input__' . $element['#type'] . '__' . $element['#attributes']['data-twig-suggestion'];
  }
  else {
    $parents = !empty($element['#parents']) ? $element['#parents'] : null;
    if ($parents && in_array('remove_button', $parents)) {
      $suggestions[] = 'input__' . $element['#type'] . '__remove_button';
    }
  }
}

function commerceformatage_preprocess_html(&$vars) {
  $routeName = \Drupal::routeMatch()->getRouteName();
  // dump($routeName);
  if (str_contains($routeName, "entity.commerce_payment_method") || str_contains($routeName, "commerce_user_orders")) {
    // dump($vars);
    // dump($vars['page']['content']['attributes']);
    $vars['page']['content']['displays_class'] = [
      'container my-5'
    ];
  }
  // dump($routeName);
}

